const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');
const path = require('path');
require('dotenv').config({ path: path.resolve(process.cwd(), '.env.local') });

// Configuration de la base de donn√©es
const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://127.0.0.1:27017';
const DB_NAME = process.env.DB_NAME || 'masyzarac';

// Sch√©ma utilisateur simplifi√© pour le script
const UserSchema = new mongoose.Schema({
  email: { type: String, required: true, unique: true },
  name: { type: String, required: true },
  password: { type: String, required: true },
  role: { type: String, enum: ['admin', 'collaborateur', 'client'], default: 'client' },
  isActive: { type: Boolean, default: true },
}, { timestamps: true });

const User = mongoose.model('User', UserSchema);

async function initDatabase() {
  try {
    // Connexion √† MongoDB
  await mongoose.connect(MONGODB_URI, { dbName: DB_NAME });
    console.log('‚úÖ Connexion √† MongoDB r√©ussie');

    // V√©rifier si un admin existe d√©j√†
    const existingAdmin = await User.findOne({ role: 'admin' });
    
    if (existingAdmin) {
      console.log('‚ÑπÔ∏è  Un administrateur existe d√©j√†');
      return;
    }

    // Cr√©er un utilisateur administrateur par d√©faut
    const hashedPassword = await bcrypt.hash('admin123', 12);
    
    const adminUser = new User({
      email: 'admin@masyzarac.com',
      name: 'Administrateur',
      password: hashedPassword,
      role: 'admin',
      isActive: true,
    });

    await adminUser.save();
    console.log('‚úÖ Utilisateur administrateur cr√©√© avec succ√®s');
    console.log('üìß Email: admin@masyzarac.com');
    console.log('üîë Mot de passe: admin123');
    console.log('‚ö†Ô∏è  Pensez √† changer le mot de passe apr√®s la premi√®re connexion');

    // Cr√©er un collaborateur de test
    const collaborateurPassword = await bcrypt.hash('collab123', 12);
    const collaborateur = new User({
      email: 'collaborateur@masyzarac.com',
      name: 'Collaborateur Test',
      password: collaborateurPassword,
      role: 'collaborateur',
      isActive: true,
    });

    await collaborateur.save();
    console.log('‚úÖ Collaborateur de test cr√©√©');
    console.log('üìß Email: collaborateur@masyzarac.com');
    console.log('üîë Mot de passe: collab123');

    // Cr√©er un client de test
    const clientPassword = await bcrypt.hash('client123', 12);
    const client = new User({
      email: 'client@masyzarac.com',
      name: 'Client Test',
      password: clientPassword,
      role: 'client',
      isActive: true,
    });

    await client.save();
    console.log('‚úÖ Client de test cr√©√©');
    console.log('üìß Email: client@masyzarac.com');
    console.log('üîë Mot de passe: client123');

  } catch (error) {
    console.error('‚ùå Erreur lors de l\'initialisation de la base de donn√©es:', error);
  } finally {
    await mongoose.disconnect();
    console.log('üîå D√©connexion de MongoDB');
  }
}

// Ex√©cuter le script
initDatabase();