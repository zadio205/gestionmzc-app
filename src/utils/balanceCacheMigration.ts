import { migrateFromLocalStorage } from '@/lib/balanceSupabaseCache';

/**
 * Script de migration pour transf√©rer les donn√©es de balance 
 * depuis localStorage vers Supabase
 */
export async function runBalanceCacheMigration(): Promise<void> {
  try {
    console.log('üöÄ D√©but de la migration des donn√©es de balance...');
    await migrateFromLocalStorage();
    console.log('‚úÖ Migration termin√©e avec succ√®s');
  } catch (error) {
    console.error('‚ùå Erreur lors de la migration:', error);
    throw error;
  }
}

// Fonction utilitaire pour nettoyer localStorage apr√®s migration r√©ussie
export function cleanupLocalStorageAfterMigration(): void {
  if (typeof window === 'undefined') return;
  
  try {
    const keys = Object.keys(localStorage).filter(key => 
      key.startsWith('balanceCache:') || key.startsWith('balanceCache:lastPeriod:')
    );
    
    for (const key of keys) {
      localStorage.removeItem(key);
    }
    
    console.log(`üßπ Nettoyage localStorage termin√©: ${keys.length} cl√©s supprim√©es`);
  } catch (error) {
    console.warn('‚ö†Ô∏è Erreur lors du nettoyage localStorage:', error);
  }
}

// Fonction d'aide pour v√©rifier si une migration est n√©cessaire
export function checkIfMigrationNeeded(): boolean {
  if (typeof window === 'undefined') return false;
  
  const keys = Object.keys(localStorage).filter(key => 
    key.startsWith('balanceCache:')
  );
  
  return keys.length > 0;
}
